{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xd05965D355fF68c8d71A525BAC46857d613Be1DB",
    "txHash": "0x7cc6199db2e645c4cc7ccccf341267522821793d7743bee8ff509cab077b1c48"
  },
  "proxies": [
    {
      "address": "0xaF367b3b07927755549aa061A6b4CF43565d109e",
      "txHash": "0x29181bcea1be734cfe896692b2b53b6dfd9443383d4a921d8e79c63bab322b52",
      "kind": "transparent"
    },
    {
      "address": "0xB9aA289728E046cB8BA7e63f85119cf34130DdF6",
      "txHash": "0xc8605e8ffbd1710e95fa8cf46196e3142cdc713a25e098aa9bfc471455758df0",
      "kind": "transparent"
    },
    {
      "address": "0x5e22b190BA005BDEC74E00fA98a144eD544fb5B7",
      "txHash": "0x9793c2be7c613d8c5f0df89af6e64ec701f76fb92ba2b36c8956d4c4cc43b8ea",
      "kind": "transparent"
    }
  ],
  "impls": {
    "1d4777c4b36acff158ebb5064818098def14a7d155e950411a67fa68642dadd9": {
      "address": "0xf7Dee0C27c99173F1662771c5f1846CAf8e73988",
      "txHash": "0x7bed612f25bf686c8b9767b3586cb7703cbefaba10343aec0993d0b252cc059e",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:517"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "supply",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "MockERC721",
            "src": "contracts/__MOCKS__/MockERC721.sol:5"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f94d6aeff82d1d359660801923083566b9d33e1e555e915e5baaac11f6bc0b34": {
      "address": "0x3E17e4F91f53Fc282Bd5cD17236A0beC907151A3",
      "txHash": "0x75855aae78e594618a999ecd57a204fb606b516f957529a7960cee9ea4d0b981",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_currentIndex",
            "offset": 0,
            "slot": "151",
            "type": "t_uint256",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:67"
          },
          {
            "label": "_burnCounter",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:70"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "153",
            "type": "t_string_storage",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:73"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:76"
          },
          {
            "label": "_ownerships",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_uint256,t_struct(TokenOwnership)8094_storage)",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:81"
          },
          {
            "label": "_addressData",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_struct(AddressData)8103_storage)",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:84"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:87"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:90"
          },
          {
            "label": "_isOperatorFilterRegistryRevoked",
            "offset": 0,
            "slot": "159",
            "type": "t_bool",
            "contract": "RevokableOperatorFiltererUpgradeable",
            "src": "contracts/OpenseaRegistries/RevokableOperatorFiltererUpgradeable.sol:17"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "160",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "161",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "162",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "merkel",
            "offset": 0,
            "slot": "212",
            "type": "t_contract(IMerkel)4483",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:18"
          },
          {
            "label": "baseURI",
            "offset": 0,
            "slot": "213",
            "type": "t_string_storage",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:30"
          },
          {
            "label": "designatedSigner",
            "offset": 0,
            "slot": "214",
            "type": "t_address",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:31"
          },
          {
            "label": "isBurningEnabled",
            "offset": 20,
            "slot": "214",
            "type": "t_bool",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:32"
          },
          {
            "label": "nonceValidityTime",
            "offset": 21,
            "slot": "214",
            "type": "t_uint32",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:33"
          },
          {
            "label": "baseAmount",
            "offset": 0,
            "slot": "215",
            "type": "t_uint256",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:34"
          },
          {
            "label": "minimumInterval",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:35"
          },
          {
            "label": "vestingPeriod",
            "offset": 0,
            "slot": "217",
            "type": "t_uint256",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:36"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "218",
            "type": "t_uint256",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:37"
          },
          {
            "label": "isController",
            "offset": 0,
            "slot": "219",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:38"
          },
          {
            "label": "claimInfos",
            "offset": 0,
            "slot": "220",
            "type": "t_mapping(t_uint16,t_struct(claimInfo)7125_storage)",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:39"
          },
          {
            "label": "rarityMultiplier",
            "offset": 0,
            "slot": "221",
            "type": "t_mapping(t_uint8,t_uint256)",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:41"
          },
          {
            "label": "tokensBurntByUser",
            "offset": 0,
            "slot": "222",
            "type": "t_mapping(t_address,t_array(t_uint16)dyn_storage)",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:42"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "223",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "VaultNFT",
            "src": "contracts/VaultNFT.sol:43"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint16)dyn_storage": {
            "label": "uint16[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IMerkel)4483": {
            "label": "contract IMerkel",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_uint16)dyn_storage)": {
            "label": "mapping(address => uint16[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressData)8103_storage)": {
            "label": "mapping(address => struct ERC721AUpgradeable.AddressData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_struct(claimInfo)7125_storage)": {
            "label": "mapping(uint16 => struct VaultNFT.claimInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TokenOwnership)8094_storage)": {
            "label": "mapping(uint256 => struct ERC721AUpgradeable.TokenOwnership)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_uint256)": {
            "label": "mapping(uint8 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressData)8103_storage": {
            "label": "struct ERC721AUpgradeable.AddressData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "numberMinted",
                "type": "t_uint64",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "numberBurned",
                "type": "t_uint64",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "aux",
                "type": "t_uint64",
                "offset": 24,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(TokenOwnership)8094_storage": {
            "label": "struct ERC721AUpgradeable.TokenOwnership",
            "members": [
              {
                "label": "addr",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "startTimestamp",
                "type": "t_uint64",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "burned",
                "type": "t_bool",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(claimInfo)7125_storage": {
            "label": "struct VaultNFT.claimInfo",
            "members": [
              {
                "label": "rarity",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint32",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalValueToClaim",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "minimumClaimAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    },
    "7f8211f861eb74e5f1ca6d6690974d28e0275fe6871fcff51458171cda186d70": {
      "address": "0x3C34d808015700fc9cb4Db6dbD8Bf8Ed06AeE0df",
      "txHash": "0x7522b5b20c1d4a436a5a3cb8a552a177ca5745b083b684cde328e0e1a0d46905",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "ravendale",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC721Upgradeable)494",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:10"
          },
          {
            "label": "merkel",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(IMerkel)2400",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:11"
          },
          {
            "label": "state",
            "offset": 20,
            "slot": "154",
            "type": "t_enum(currentState)2469",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:24"
          },
          {
            "label": "claimInfoByTokenId",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_uint256,t_struct(claimInfo)2477_storage)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:29"
          },
          {
            "label": "vestingStartTime",
            "offset": 0,
            "slot": "156",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:31"
          },
          {
            "label": "merkelAllocationPerToken",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:32"
          },
          {
            "label": "minClaimInterval",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:33"
          },
          {
            "label": "minAmtClaimedPerInterval",
            "offset": 0,
            "slot": "159",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:34"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "160",
            "type": "t_address",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:35"
          },
          {
            "label": "designatedSigner",
            "offset": 0,
            "slot": "161",
            "type": "t_address",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:36"
          },
          {
            "label": "totalWithdrawal",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:37"
          },
          {
            "label": "PRICE_PER_RES",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:38"
          },
          {
            "label": "MAX_RES_PER_ADDR_FCFS",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:39"
          },
          {
            "label": "MAX_RES_PER_ADDR_VL",
            "offset": 0,
            "slot": "165",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:40"
          },
          {
            "label": "MAX_AMT_FOR_RES",
            "offset": 0,
            "slot": "166",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:41"
          },
          {
            "label": "SIGNATURE_VALIDITY",
            "offset": 0,
            "slot": "167",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:42"
          },
          {
            "label": "FCFS_Reservers_List",
            "offset": 0,
            "slot": "168",
            "type": "t_array(t_address)dyn_storage",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:44"
          },
          {
            "label": "VL_Reservers_List",
            "offset": 0,
            "slot": "169",
            "type": "t_array(t_address)dyn_storage",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:45"
          },
          {
            "label": "resByAddr_FCFS",
            "offset": 0,
            "slot": "170",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:46"
          },
          {
            "label": "resByAddr_VL",
            "offset": 0,
            "slot": "171",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:47"
          },
          {
            "label": "tokensLockedBy",
            "offset": 0,
            "slot": "172",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:48"
          },
          {
            "label": "lockerOf",
            "offset": 0,
            "slot": "173",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:49"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "174",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:50"
          },
          {
            "label": "hasClaimedRefund",
            "offset": 0,
            "slot": "175",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:51"
          },
          {
            "label": "controllers",
            "offset": 0,
            "slot": "176",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:52"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IERC721Upgradeable)494": {
            "label": "contract IERC721Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IMerkel)2400": {
            "label": "contract IMerkel",
            "numberOfBytes": "20"
          },
          "t_enum(currentState)2469": {
            "label": "enum Reservation.currentState",
            "members": [
              "NOT_LIVE",
              "LIVE",
              "OVER",
              "REFUND"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(claimInfo)2477_storage)": {
            "label": "mapping(uint256 => struct Reservation.claimInfo)",
            "numberOfBytes": "32"
          },
          "t_struct(claimInfo)2477_storage": {
            "label": "struct Reservation.claimInfo",
            "members": [
              {
                "label": "lastClaimTime",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    },
    "051e3f60c2057c60a7e4b2f140c173d644e3cc12e146b463923f5bf02000b0b4": {
      "address": "0x702A3CC8A7b10438Eb6d9235d4C18c74068b0b7A",
      "txHash": "0x3b27c6ab8fce63ade320e34962d07eb8df959e7ac0cd9a5be36a3a1680fd6f42",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "ravendale",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC721Upgradeable)2101",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:10"
          },
          {
            "label": "merkel",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(IMerkel)4483",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:11"
          },
          {
            "label": "state",
            "offset": 20,
            "slot": "154",
            "type": "t_enum(currentState)5662",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:24"
          },
          {
            "label": "claimInfoByTokenId",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_uint256,t_struct(claimInfo)5670_storage)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:29"
          },
          {
            "label": "vestingStartTime",
            "offset": 0,
            "slot": "156",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:31"
          },
          {
            "label": "merkelAllocationPerToken",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:32"
          },
          {
            "label": "minClaimInterval",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:33"
          },
          {
            "label": "minAmtClaimedPerInterval",
            "offset": 0,
            "slot": "159",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:34"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "160",
            "type": "t_address",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:35"
          },
          {
            "label": "designatedSigner",
            "offset": 0,
            "slot": "161",
            "type": "t_address",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:36"
          },
          {
            "label": "totalWithdrawal",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:37"
          },
          {
            "label": "PRICE_PER_RES",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:38"
          },
          {
            "label": "MAX_RES_PER_ADDR_FCFS",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:39"
          },
          {
            "label": "MAX_RES_PER_ADDR_VL",
            "offset": 0,
            "slot": "165",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:40"
          },
          {
            "label": "MAX_AMT_FOR_RES",
            "offset": 0,
            "slot": "166",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:41"
          },
          {
            "label": "SIGNATURE_VALIDITY",
            "offset": 0,
            "slot": "167",
            "type": "t_uint256",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:42"
          },
          {
            "label": "FCFS_Reservers_List",
            "offset": 0,
            "slot": "168",
            "type": "t_array(t_address)dyn_storage",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:44"
          },
          {
            "label": "VL_Reservers_List",
            "offset": 0,
            "slot": "169",
            "type": "t_array(t_address)dyn_storage",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:45"
          },
          {
            "label": "resByAddr_FCFS",
            "offset": 0,
            "slot": "170",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:46"
          },
          {
            "label": "resByAddr_VL",
            "offset": 0,
            "slot": "171",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:47"
          },
          {
            "label": "tokensLockedBy",
            "offset": 0,
            "slot": "172",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:48"
          },
          {
            "label": "lockerOf",
            "offset": 0,
            "slot": "173",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:49"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "174",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:50"
          },
          {
            "label": "hasClaimedRefund",
            "offset": 0,
            "slot": "175",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:51"
          },
          {
            "label": "controllers",
            "offset": 0,
            "slot": "176",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Reservation",
            "src": "contracts/Reservation.sol:52"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IERC721Upgradeable)2101": {
            "label": "contract IERC721Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IMerkel)4483": {
            "label": "contract IMerkel",
            "numberOfBytes": "20"
          },
          "t_enum(currentState)5662": {
            "label": "enum Reservation.currentState",
            "members": [
              "NOT_LIVE",
              "LIVE",
              "OVER",
              "REFUND"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(claimInfo)5670_storage)": {
            "label": "mapping(uint256 => struct Reservation.claimInfo)",
            "numberOfBytes": "32"
          },
          "t_struct(claimInfo)5670_storage": {
            "label": "struct Reservation.claimInfo",
            "members": [
              {
                "label": "lastClaimTime",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    }
  }
}
