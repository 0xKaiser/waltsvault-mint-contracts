{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xF8F53121a9B8b1c3Db4b0de34390f365d6Dc6e5D",
    "txHash": "0x7ad65257255f2856c49deff9087650f81c768bb153143dea0a23356b9389434a"
  },
  "proxies": [
    {
      "address": "0x362b533342d274efe32b1ce533dfEb6dA537Fd3c",
      "txHash": "0x07b9f5905fe05fb9fb7357f7531bb6846930b82a442318f4595e58396664df87",
      "kind": "transparent"
    },
    {
      "address": "0xBeb297284e6D4E5b020e200C99E93400f21b2Cd7",
      "txHash": "0x8639203dd69d36a3308d2e093f905d90ac54ff1c837e52b8a06da2b2c41fdf24",
      "kind": "transparent"
    },
    {
      "address": "0xDa67FD1Cb01a81dADec6727b9D0B74a8F2Dc1437",
      "txHash": "0x1effde1e4bdbd05bebdfd8015563314ff8be5d7010c0f3338a519f59418ae244",
      "kind": "transparent"
    },
    {
      "address": "0x692175B90e45561EAec3be93726235C8A2b006a7",
      "txHash": "0x637a55e02da4c7dfab399f6c985d288c8bd60fdcdbb663912cc31c162ef94ce5",
      "kind": "transparent"
    },
    {
      "address": "0xbA7Cab0D48f9d9d4D509FECFd693335B7C9b456b",
      "txHash": "0x60a86685973a26c8dc0a6bc9483354ee2cd68bcfebb405fe9852dc07ec66869a",
      "kind": "transparent"
    },
    {
      "address": "0x3cB351fEF1741bAD327554044C7c08761e67a994",
      "txHash": "0x260479b8777943669ff910d991bea1e1af89ac920ee898b85ba6c08b4efd09da",
      "kind": "transparent"
    },
    {
      "address": "0xE4B1903789c0CCE595A47A1dC921874DcF656F5f",
      "txHash": "0x6fef31c6727057da29efa6542e3539eb773a8c747d19e80fda4ea9816d8ba3c4",
      "kind": "transparent"
    }
  ],
  "impls": {
    "ef699fcb39b708694147aba2c65df6cc1f05a6f45947c67e2a9747d05b74cb43": {
      "address": "0x8A18b81f8bE5570033Bd15497BA3c6C7eb049882",
      "txHash": "0x7a0992f46a43d02f7b19b38d8b35550d9bb27de4202c598ff4c953b9fed8f55b",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "ravendale",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC721Upgradeable)512",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:10"
          },
          {
            "label": "state",
            "offset": 20,
            "slot": "153",
            "type": "t_enum(currentState)3649",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:22"
          },
          {
            "label": "claimInfoByTokenId",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_struct(claimInfo)3657_storage)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:27"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:29"
          },
          {
            "label": "designatedSigner",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:30"
          },
          {
            "label": "totalWithdrawal",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:31"
          },
          {
            "label": "PRICE_PER_RES",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:32"
          },
          {
            "label": "MAX_RES_PER_ADDR_FCFS",
            "offset": 0,
            "slot": "159",
            "type": "t_uint256",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:33"
          },
          {
            "label": "MAX_RES_PER_ADDR_VL",
            "offset": 0,
            "slot": "160",
            "type": "t_uint256",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:34"
          },
          {
            "label": "MAX_AMT_FOR_RES",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:35"
          },
          {
            "label": "SIGNATURE_VALIDITY",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:36"
          },
          {
            "label": "FCFS_Reservers_List",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_address)dyn_storage",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:38"
          },
          {
            "label": "VL_Reservers_List",
            "offset": 0,
            "slot": "164",
            "type": "t_array(t_address)dyn_storage",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:39"
          },
          {
            "label": "resByAddr_FCFS",
            "offset": 0,
            "slot": "165",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:40"
          },
          {
            "label": "resByAddr_VL",
            "offset": 0,
            "slot": "166",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:41"
          },
          {
            "label": "tokensLockedBy",
            "offset": 0,
            "slot": "167",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:42"
          },
          {
            "label": "lockerOf",
            "offset": 0,
            "slot": "168",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:43"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "169",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:44"
          },
          {
            "label": "hasClaimedRefund",
            "offset": 0,
            "slot": "170",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:45"
          },
          {
            "label": "controllers",
            "offset": 0,
            "slot": "171",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "WaltsVaultReservation",
            "src": "contracts/WaltsVaultReservation.sol:46"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IERC721Upgradeable)512": {
            "label": "contract IERC721Upgradeable",
            "numberOfBytes": "20"
          },
          "t_enum(currentState)3649": {
            "label": "enum WaltsVaultReservation.currentState",
            "members": [
              "NOT_LIVE",
              "LIVE",
              "OVER",
              "REFUND"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(claimInfo)3657_storage)": {
            "label": "mapping(uint256 => struct WaltsVaultReservation.claimInfo)",
            "numberOfBytes": "32"
          },
          "t_struct(claimInfo)3657_storage": {
            "label": "struct WaltsVaultReservation.claimInfo",
            "members": [
              {
                "label": "lastClaimTime",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    },
    "cd2a4b0285f3deb94b343e8d563a638d49e74b6e04774f5888e831bcdadf9aa1": {
      "address": "0xE32cAdec7f86E55AF9AAF267a4Fc74AB1503F4D1",
      "txHash": "0xb94fbecce544cad80bda8fef0e5a6d07c6d09019b9bd7ed4006d1ca5c80dc98e",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:517"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "supply",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "TestToken300423",
            "src": "contracts/__MOCKS__/TestToken300423.sol:5"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "202",
            "type": "t_uint256",
            "contract": "TestToken300423",
            "src": "contracts/__MOCKS__/TestToken300423.sol:6"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c74c795becaa7a227579583a7f28ba8099bbbbe78f16b91f6bde58de9d346011": {
      "address": "0xa1F3091D7e9A61AF8eCC8ef0a0622265bac7b9c7",
      "txHash": "0x83d95ce53e920b0e3bc69af9a51c077f04a83cd5ec333b631358c74da9ea4b8d",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_currentIndex",
            "offset": 0,
            "slot": "151",
            "type": "t_uint256",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:67"
          },
          {
            "label": "_burnCounter",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:70"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "153",
            "type": "t_string_storage",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:73"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:76"
          },
          {
            "label": "_ownerships",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_uint256,t_struct(TokenOwnership)5871_storage)",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:81"
          },
          {
            "label": "_addressData",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_struct(AddressData)5880_storage)",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:84"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:87"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721AUpgradeable",
            "src": "contracts/utils/ERC721AUpgradeable.sol:90"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "159",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "160",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "161",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "_isOperatorFilterRegistryRevoked",
            "offset": 0,
            "slot": "211",
            "type": "t_bool",
            "contract": "RevokableOperatorFiltererUpgradeable",
            "src": "contracts/OpenseaRegistries/RevokableOperatorFiltererUpgradeable.sol:17"
          },
          {
            "label": "baseURI",
            "offset": 0,
            "slot": "212",
            "type": "t_string_storage",
            "contract": "TestVault",
            "src": "contracts/TestVault.sol:19"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "213",
            "type": "t_uint256",
            "contract": "TestVault",
            "src": "contracts/TestVault.sol:20"
          },
          {
            "label": "isController",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVault",
            "src": "contracts/TestVault.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressData)5880_storage)": {
            "label": "mapping(address => struct ERC721AUpgradeable.AddressData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TokenOwnership)5871_storage)": {
            "label": "mapping(uint256 => struct ERC721AUpgradeable.TokenOwnership)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressData)5880_storage": {
            "label": "struct ERC721AUpgradeable.AddressData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "numberMinted",
                "type": "t_uint64",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "numberBurned",
                "type": "t_uint64",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "aux",
                "type": "t_uint64",
                "offset": 24,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(TokenOwnership)5871_storage": {
            "label": "struct ERC721AUpgradeable.TokenOwnership",
            "members": [
              {
                "label": "addr",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "startTimestamp",
                "type": "t_uint64",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "burned",
                "type": "t_bool",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f3248df3b3f954925c14fef84f70d7bebea59fd74ffcc61224ba98135f920d48": {
      "address": "0x50CA1f91A994F58B80576d248FFfD30D462774E3",
      "txHash": "0xe8681ea42d280b0fcba75bdcd62e7f4149eaa21137a6c8a47a5c019ebafe51ee",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "RD",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(ITestNFT)3867",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:10"
          },
          {
            "label": "WV",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(ITestNFT)3867",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:11"
          },
          {
            "label": "TREASURY",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:13"
          },
          {
            "label": "AUTHORISED_SIGNER",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:14"
          },
          {
            "label": "MAX_MINTS_PER_TOKEN_RD",
            "offset": 20,
            "slot": "156",
            "type": "t_uint8",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:16"
          },
          {
            "label": "MAX_MINTS_PER_SPOT_VL",
            "offset": 21,
            "slot": "156",
            "type": "t_uint8",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:17"
          },
          {
            "label": "MAX_MINTS_PER_ADDR_PUBLIC",
            "offset": 22,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:19"
          },
          {
            "label": "MAX_AMOUNT_FOR_SALE",
            "offset": 24,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:20"
          },
          {
            "label": "SIGNATURE_VALIDITY",
            "offset": 26,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:21"
          },
          {
            "label": "START_TIME_RD",
            "offset": 28,
            "slot": "156",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:23"
          },
          {
            "label": "END_TIME_RD",
            "offset": 0,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:24"
          },
          {
            "label": "START_TIME_VL",
            "offset": 4,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:25"
          },
          {
            "label": "END_TIME_VL",
            "offset": 8,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:26"
          },
          {
            "label": "START_TIME_PUBLIC",
            "offset": 12,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:27"
          },
          {
            "label": "END_TIME_PUBLIC",
            "offset": 16,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:28"
          },
          {
            "label": "PRICE",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:30"
          },
          {
            "label": "rdMintsBy",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:32"
          },
          {
            "label": "vlMintsBy",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:33"
          },
          {
            "label": "publicMintsBy",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:34"
          },
          {
            "label": "tokensLockedBy",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:35"
          },
          {
            "label": "lockerOf",
            "offset": 0,
            "slot": "163",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:36"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "164",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:37"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ITestNFT)3867": {
            "label": "contract ITestNFT",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    },
    "8dbc6ce772d56c95bb94aea6f6fc9b09da66471adb1dd129cbf4ce9a48ffdaea": {
      "address": "0xbD6Cd31ac5cb73B7607EdacFadecAb01b5FE65ce",
      "txHash": "0x1c91ef95e36e0bcf6ad9a83457ea0ecd58dcd32e1afa8a28d20737c0698e5bf8",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "RD",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(ITestNFT)2329",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:10"
          },
          {
            "label": "WV",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(ITestNFT)2329",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:11"
          },
          {
            "label": "TREASURY",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:13"
          },
          {
            "label": "AUTHORISED_SIGNER",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:14"
          },
          {
            "label": "MAX_MINTS_PER_TOKEN_RD",
            "offset": 20,
            "slot": "156",
            "type": "t_uint8",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:16"
          },
          {
            "label": "MAX_MINTS_PER_SPOT_VL",
            "offset": 21,
            "slot": "156",
            "type": "t_uint8",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:17"
          },
          {
            "label": "MAX_MINTS_PER_ADDR_PUBLIC",
            "offset": 22,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:19"
          },
          {
            "label": "MAX_AMOUNT_FOR_SALE",
            "offset": 24,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:20"
          },
          {
            "label": "SIGNATURE_VALIDITY",
            "offset": 26,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:21"
          },
          {
            "label": "START_TIME_RD",
            "offset": 28,
            "slot": "156",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:23"
          },
          {
            "label": "END_TIME_RD",
            "offset": 0,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:24"
          },
          {
            "label": "START_TIME_VL",
            "offset": 4,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:25"
          },
          {
            "label": "END_TIME_VL",
            "offset": 8,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:26"
          },
          {
            "label": "START_TIME_PUBLIC",
            "offset": 12,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:27"
          },
          {
            "label": "END_TIME_PUBLIC",
            "offset": 16,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:28"
          },
          {
            "label": "PRICE",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:30"
          },
          {
            "label": "amountSold",
            "offset": 0,
            "slot": "159",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:32"
          },
          {
            "label": "rdMintsBy",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:33"
          },
          {
            "label": "vlMintsBy",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:34"
          },
          {
            "label": "publicMintsBy",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:35"
          },
          {
            "label": "tokensLockedBy",
            "offset": 0,
            "slot": "163",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:36"
          },
          {
            "label": "lockerOf",
            "offset": 0,
            "slot": "164",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:37"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "165",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:38"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ITestNFT)2329": {
            "label": "contract ITestNFT",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    },
    "00bf6223543f9738a3fbd78e159dda5c08306e2e55633fa158f05b9dfe2f69b5": {
      "address": "0xe602AcA1694F738d6eC58A9bC9e1c9397aa2ADB3",
      "txHash": "0x0be2796f53c45d89de0d34dc913470e7341bc716baa498da3a7d80f023ac3400",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "RD",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(ITestNFT)2329",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:10"
          },
          {
            "label": "WV",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(ITestNFT)2329",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:11"
          },
          {
            "label": "TREASURY",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:13"
          },
          {
            "label": "AUTHORISED_SIGNER",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:14"
          },
          {
            "label": "MAX_MINTS_PER_TOKEN_RD",
            "offset": 20,
            "slot": "156",
            "type": "t_uint8",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:16"
          },
          {
            "label": "MAX_MINTS_PER_SPOT_VL",
            "offset": 21,
            "slot": "156",
            "type": "t_uint8",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:17"
          },
          {
            "label": "MAX_MINTS_PER_ADDR_PUBLIC",
            "offset": 22,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:19"
          },
          {
            "label": "MAX_AMOUNT_FOR_SALE",
            "offset": 24,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:20"
          },
          {
            "label": "SIGNATURE_VALIDITY",
            "offset": 26,
            "slot": "156",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:21"
          },
          {
            "label": "START_TIME_RD",
            "offset": 28,
            "slot": "156",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:23"
          },
          {
            "label": "END_TIME_RD",
            "offset": 0,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:24"
          },
          {
            "label": "START_TIME_VL",
            "offset": 4,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:25"
          },
          {
            "label": "END_TIME_VL",
            "offset": 8,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:26"
          },
          {
            "label": "START_TIME_PUBLIC",
            "offset": 12,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:27"
          },
          {
            "label": "END_TIME_PUBLIC",
            "offset": 16,
            "slot": "157",
            "type": "t_uint32",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:28"
          },
          {
            "label": "PRICE",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:30"
          },
          {
            "label": "amountSold",
            "offset": 0,
            "slot": "159",
            "type": "t_uint16",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:32"
          },
          {
            "label": "rdMintsBy",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:33"
          },
          {
            "label": "vlMintsBy",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:34"
          },
          {
            "label": "publicMintsBy",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:35"
          },
          {
            "label": "tokensLockedBy",
            "offset": 0,
            "slot": "163",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:36"
          },
          {
            "label": "lockerOf",
            "offset": 0,
            "slot": "164",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:37"
          },
          {
            "label": "isSignatureUsed",
            "offset": 0,
            "slot": "165",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "contract": "TestMintController",
            "src": "contracts/TestMintController.sol:38"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_memory_ptr": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ITestNFT)2329": {
            "label": "contract ITestNFT",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes"
          }
        }
      }
    }
  }
}
